#include <BLEDevice.h>
#include <WiFi.h>
#include <PubSubClient.h>

const char* ssid = "";
const char* password = "";

// MQTT broker details
const char* mqtt_server = "";
const int mqtt_port = ;
const char* mqtt_user = "";
const char* mqtt_password = "";

// Define MQTT topic
const char* mqtt_topic_sub = "TANKRADARENTRY";

static BLEUUID serviceUUID("");
static BLEUUID rxCharUUID("");
static BLEUUID txCharUUID("");

static boolean doConnect = false;
static boolean connected = false;
static BLERemoteCharacteristic *pRxCharacteristic;
static BLERemoteCharacteristic *pTxCharacteristic;
static BLEAdvertisedDevice *myDevice;

WiFiClient espClient;
PubSubClient client(espClient);

// Function to handle incoming MQTT messages
void mqttCallback(char* topic, byte* payload, unsigned int length) {
    Serial.print("Message arrived [");
    Serial.print(topic);
    Serial.print("]: ");
    for (unsigned int i = 0; i < length; i++) {
        Serial.print((char)payload[i]);
    }
    Serial.println();

    // You can add code here to handle the received message
}

void notifyCallback(BLERemoteCharacteristic *pBLERemoteCharacteristic, uint8_t *pData, size_t length, bool isNotify) {
    Serial.print("Received data: ");
    Serial.write(pData, length);  // Print the received data to Serial Monitor
    Serial.println();
    
    if(client.connected()) {
        Serial.println("Publishing data to MQTT server...");
        if(client.publish("BLEdata", (char*)pData, length)) {
            Serial.println("Data published");
        } else {
            Serial.println("Failed");
        }
    } else {
        Serial.println("MQTT client is not connected.");
    }
}

class MyClientCallback : public BLEClientCallbacks {
    void onConnect(BLEClient *pclient) {}
    void onDisconnect(BLEClient *pclient) {
        connected = false;
        Serial.println("Disconnected from BLE Server.");
    }
};

bool connectToServer() {
    Serial.println("Creating BLE client...");
    BLEClient *pClient = BLEDevice::createClient();
    pClient->setClientCallbacks(new MyClientCallback());
    Serial.println("Connecting to BLE server...");
    pClient->connect(myDevice);

    Serial.println("Getting remote service...");
    BLERemoteService *pRemoteService = pClient->getService(serviceUUID);
    if (pRemoteService == nullptr) {
        Serial.println("Failed to find BLE service.");
        pClient->disconnect();
        return false;
    }

    Serial.println("Getting RX characteristic...");
    pRxCharacteristic = pRemoteService->getCharacteristic(rxCharUUID);
    if (pRxCharacteristic == nullptr) {
        Serial.println("Failed to find RX characteristic.");
        pClient->disconnect();
        return false;
    }

    Serial.println("Getting TX characteristic...");
    pTxCharacteristic = pRemoteService->getCharacteristic(txCharUUID);
    if (pTxCharacteristic == nullptr) {
        Serial.println("Failed to find TX characteristic.");
        pClient->disconnect();
        return false;
    }

    if (pTxCharacteristic->canNotify()) {
        Serial.println("Registering for notifications...");
        pTxCharacteristic->registerForNotify(notifyCallback);
    }

    connected = true;
    Serial.println("Successfully connected to BLE server.");
    return true;
}

class MyAdvertisedDeviceCallbacks : public BLEAdvertisedDeviceCallbacks {
    void onResult(BLEAdvertisedDevice advertisedDevice) {
        if (advertisedDevice.haveServiceUUID() && advertisedDevice.isAdvertisingService(serviceUUID)) {
            BLEDevice::getScan()->stop();
            myDevice = new BLEAdvertisedDevice(advertisedDevice);
            doConnect = true;
        }
    }
};

void setup() {
    Serial.begin(115200);
    BLEDevice::init("");

    Serial.println("Connecting to WiFi...");
    WiFi.begin(ssid, password);
    while (WiFi.status() != WL_CONNECTED) {
        delay(500);
        Serial.print(".");
    }
    Serial.println("\nConnected to WiFi.");

    client.setServer(mqtt_server, mqtt_port);
    client.setCallback(mqttCallback);

    startBLEScan();
}

void startBLEScan() {
    Serial.println("Starting BLE scan...");
    BLEScan *pBLEScan = BLEDevice::getScan();
    pBLEScan->setAdvertisedDeviceCallbacks(new MyAdvertisedDeviceCallbacks());
    pBLEScan->setActiveScan(true);
    pBLEScan->start(5, false);
}

void reconnect() {
    while (!client.connected()) {
        Serial.print("Attempting MQTT connection...");
        if (client.connect("ArduinoClient", mqtt_user, mqtt_password)) {
            Serial.println("connected");
            // Subscribe to the topic after connecting
            client.subscribe(mqtt_topic_sub);
        } else {
            Serial.print("failed, rc=");
            Serial.print(client.state());
            Serial.println(" try again in 5 seconds");
            delay(5000);
        }
    }
}

void loop() {
    if (!client.connected()) {
        reconnect();
    }
    client.loop();

    if (doConnect) {
        if (connectToServer()) {
            Serial.println("Connected to BLE Server.");
        } else {
            Serial.println("BLE not found.");
        }
        doConnect = false;
    }

    if (!connected) {
        Serial.println("BLE not connected. Restarting scan...");
        esp_restart();
    } else {
        String inputValue = "";//MSG INPUT TO RX CHARACTERISTIC(HEX)
        Serial.println("Writing to RX characteristic...");
        pRxCharacteristic->writeValue(inputValue.c_str(), inputValue.length());
        delay(5000); 
    }

    delay(1000);
}
